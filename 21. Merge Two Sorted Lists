# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        if l1 is None:
            return l2;
        elif l2 is None:
            return l1;
        
        if l1.val < l2.val:
            l3 = ListNode(l1.val);
            l1 = l1.next;
        else:
            l3 = ListNode(l2.val);
            l2 = l2.next;
        insert = l3;
        
        while l1 or l2 is not None:
            if l1 and l2 is not None and l1.val < l2.val:
                insert.next = ListNode(l1.val);
                insert = insert.next;
                l1 = l1.next;
            elif l1 and l2 is not None and l1.val > l2.val:
                insert.next = ListNode(l2.val);
                insert = insert.next;
                l2 = l2.next;
            elif l1 and l2 is not None and l1.val == l2.val:
                insert.next = ListNode(l1.val);
                insert = insert.next;
                l1 = l1.next;
                insert.next = ListNode(l2.val);
                insert = insert.next;
                l2 = l2.next;
            elif l1 is not None and l2 is None:
                insert.next = l1;
                l1 = None;
            elif l2 is not None and l1 is None:
                insert.next = l2;
                l2 = None;
            
            
        return l3
        
        
        
        
